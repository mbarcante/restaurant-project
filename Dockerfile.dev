# Use a Node.js base image suitable for development.
# We'll use this for both installing dependencies and running the app.
FROM node:22-alpine

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json first to leverage Docker cache
# This ensures npm install is only re-run if dependencies change.
COPY package*.json ./

# Install ALL application dependencies (including devDependencies like TypeScript, ts-node, nodemon).
# We install all here because we need dev tools for running/compiling in dev mode.
RUN npm install

# The rest of the application code will be mounted via a volume in docker-compose.
# We don't COPY the source code here, as it will be synced from your host machine.

# Expose the port your Node.js application will listen on.
EXPOSE 3000

# Define the default command to run your application in development mode.
# This assumes you have a "dev" script in your package.json that uses nodemon and ts-node.
CMD ["npm", "run", "dev"]